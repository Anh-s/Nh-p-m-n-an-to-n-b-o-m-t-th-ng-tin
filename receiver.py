import os
import json
import base64
from tkinter import Tk, Button, Label, messagebox
from getpass import getpass
from Crypto.Cipher import DES, PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA512

# H√†m b·ªè padding PKCS#5/7 kh·ªèi d·ªØ li·ªáu gi·∫£i m√£ DES
def unpad(data):
    return data[:-data[-1]] #

# H√†m ƒë·ªçc kh√≥a ri√™ng c·ªßa ng∆∞·ªùi nh·∫≠n t·ª´ file, y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m·ªü kh√≥a
def load_receiver_private_key():
    try:
        # ƒê·ªçc file kh√≥a ri√™ng (ƒë√£ ƒë∆∞·ª£c m√£ h√≥a)
        with open("keys/receiver_private.pem", "rb") as f: #
            private_key_data = f.read() #
    except FileNotFoundError: #
        # N·∫øu file kh√¥ng t·ªìn t·∫°i, b√°o l·ªói popup v√† tr·∫£ v·ªÅ None
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file 'keys/receiver_private.pem'") #
        return None

    # Th·ª≠ nh·∫≠p m·∫≠t kh·∫©u t·ªëi ƒëa 3 l·∫ßn
    for attempt in range(3): #
        passphrase = getpass(f"üîê Nh·∫≠p m·∫≠t kh·∫©u gi·∫£i m√£ kh√≥a ri√™ng (l·∫ßn {attempt+1}/3): ") #
        try:
            # C·ªë g·∫Øng gi·∫£i m√£ kh√≥a ri√™ng v·ªõi passphrase nh·∫≠p v√†o
            private_key = RSA.import_key(private_key_data, passphrase=passphrase) #
            return private_key  # Th√†nh c√¥ng tr·∫£ v·ªÅ kh√≥a ri√™ng ƒë√£ gi·∫£i m√£
        except ValueError: #
            print(" M·∫≠t kh·∫©u sai.")  # Nh·∫≠p sai pass, th·ª≠ l·∫°i
    print(" ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠. H·ªßy nh·∫≠n b√†i.") #
    return None  # Qu√° s·ªë l·∫ßn th·ª≠, tr·∫£ v·ªÅ None

# H√†m ch√≠nh nh·∫≠n b√†i t·∫≠p
def receive_assignment():
    os.makedirs("data", exist_ok=True) #

    try:
        # ƒê·ªçc kh√≥a c√¥ng khai c·ªßa ng∆∞·ªùi g·ª≠i (d√πng ƒë·ªÉ ki·ªÉm tra ch·ªØ k√Ω)
        with open("keys/sender_public.pem", "r") as f: #
            sender_public = RSA.import_key(f.read()) #
    except FileNotFoundError: #
        return " Kh√¥ng t√¨m th·∫•y kh√≥a c√¥ng khai c·ªßa sender (sender_public.pem)." #

    # Load kh√≥a ri√™ng c·ªßa ng∆∞·ªùi nh·∫≠n
    receiver_private = load_receiver_private_key() #
    if receiver_private is None: #
        return "Kh√¥ng th·ªÉ m·ªü kh√≥a ri√™ng. Nh·∫≠n b√†i th·∫•t b·∫°i." #

    try:
        # ƒê·ªçc file d·ªØ li·ªáu b√†i t·∫≠p ƒë√£ g·ª≠i, d·∫°ng JSON
        with open("sent/sent_packets.json", "r") as f: #
            data = json.load(f) #
    except FileNotFoundError: #
        return " Kh√¥ng t√¨m th·∫•y file g·ª≠i ƒë·∫øn (sent_packets.json)." #

    try:
        # Gi·∫£i m√£ c√°c tr∆∞·ªùng base64 trong file JSON
        metadata = base64.b64decode(data["metadata"]) #
        meta_sig = base64.b64decode(data["meta_sig"]) #
        enc_key = base64.b64decode(data["enc_session_key"]) #
        parts = data["parts"]  # Danh s√°ch c√°c ph·∫ßn m√£ h√≥a b√†i t·∫≠p
    except Exception: #
        return "L·ªói ƒë·ªçc d·ªØ li·ªáu g√≥i tin." #

    # --- 2. X√°c th·ª±c & Trao kh√≥a (ph√≠a Ng∆∞·ªùi nh·∫≠n) ---
    # Ki·ªÉm tra ch·ªØ k√Ω c·ªßa metadata v·ªõi kh√≥a c√¥ng khai sender
    try:
        pkcs1_15.new(sender_public).verify(SHA512.new(metadata), meta_sig) #
    except (ValueError, TypeError): #
        # N·∫øu ch·ªØ k√Ω metadata kh√¥ng h·ª£p l·ªá, t·ª´ ch·ªëi v√† g·ª≠i NACK (m√¥ ph·ªèng)
        print("NACK: Ch·ªØ k√Ω metadata kh√¥ng h·ª£p l·ªá.")
        return " Ch·ªØ k√Ω metadata kh√¥ng h·ª£p l·ªá."

    # --- 1. Handshake: Ng∆∞·ªùi nh·∫≠n tr·∫£ l·ªùi "Ready!" ---
    # Sau khi metadata ƒë∆∞·ª£c x√°c minh, ki·ªÉm tra tin nh·∫Øn "Hello!"
    metadata_str_decoded = metadata.decode()
    if metadata_str_decoded.startswith("Hello!"):
        print(" ƒê√£ nh·∫≠n ƒë∆∞·ª£c 'Hello!' t·ª´ ng∆∞·ªùi g·ª≠i.")
        messagebox.showinfo("Handshake", "Ng∆∞·ªùi nh·∫≠n ƒë√£ s·∫µn s√†ng: Ready!") # M√¥ ph·ªèng g·ª≠i "Ready!"
    else:
        # N·∫øu kh√¥ng c√≥ "Hello!" ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, t·ª´ ch·ªëi
        print(" NACK: Kh√¥ng t√¨m th·∫•y th√¥ng ƒëi·ªáp 'Hello!' h·ª£p l·ªá trong metadata.")
        return " Handshake th·∫•t b·∫°i: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c 'Hello!'."

    # Gi·∫£i m√£ kh√≥a phi√™n DES b·∫±ng kh√≥a ri√™ng c·ªßa ng∆∞·ªùi nh·∫≠n
    cipher_rsa = PKCS1_v1_5.new(receiver_private) #
    session_key = cipher_rsa.decrypt(enc_key, None) #
    if not session_key: #
        print("NACK: Kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c kh√≥a phi√™n.")
        return " Kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c kh√≥a phi√™n." #

    full_content = b""  # Bi·∫øn ch·ª©a to√†n b·ªô n·ªôi dung b√†i t·∫≠p sau khi gi·∫£i m√£
    integrity_ok = True # C·ªù ki·ªÉm tra t√≠nh to√†n v·∫πn t·ªïng th·ªÉ

    # --- 4. Ph√≠a Ng∆∞·ªùi nh·∫≠n: Ki·ªÉm tra hash v√† ch·ªØ k√Ω m·ªói ph·∫ßn & Gi·∫£i m√£ ---
    # X·ª≠ l√Ω t·ª´ng ph·∫ßn b√†i t·∫≠p
    for idx, part in enumerate(parts): #
        try:
            # Gi·∫£i m√£ iv, ciphertext, ch·ªØ k√Ω v√† l·∫•y hash t·ª´ JSON
            iv = base64.b64decode(part["iv"]) #
            ciphertext = base64.b64decode(part["cipher"]) #
            sig = base64.b64decode(part["sig"]) #
            hash_hex = part["hash"] #
        except Exception: #
            integrity_ok = False
            print(f"NACK: L·ªói ƒë·ªãnh d·∫°ng ·ªü ph·∫ßn {idx+1}")
            break # Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu c√≥ l·ªói ƒë·ªãnh d·∫°ng

        # T√≠nh hash: SHA-512(IV || ciphertext)
        digest = SHA512.new(iv + ciphertext) #

        # Ki·ªÉm tra hash ƒë√£ t√≠nh v·ªõi hash l∆∞u trong JSON
        if digest.hexdigest() != hash_hex: #
            integrity_ok = False
            print(f" NACK (l·ªói integrity): Hash kh√¥ng kh·ªõp ·ªü ph·∫ßn {idx+1}")
            break # Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu hash kh√¥ng kh·ªõp

        # Ki·ªÉm tra ch·ªØ k√Ω c·ªßa ph·∫ßn (signature) v·ªõi kh√≥a sender
        try:
            pkcs1_15.new(sender_public).verify(digest, sig) #
        except (ValueError, TypeError): #
            integrity_ok = False
            print(f" NACK (l·ªói integrity): Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá ·ªü ph·∫ßn {idx+1}")
            break # Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá

        # N·∫øu t·∫•t c·∫£ h·ª£p l·ªá ‚Äì Gi·∫£i m√£ t·ª´ng ph·∫ßn b·∫±ng DES
        des = DES.new(session_key, DES.MODE_CBC, iv) #
        plaintext = des.decrypt(ciphertext) #

        # B·ªè padding v√† n·ªëi v√†o full_content
        full_content += unpad(plaintext) #

    if integrity_ok:
        # N·∫øu t·∫•t c·∫£ h·ª£p l·ªá ‚Äì Gh√©p v√† l∆∞u file assignment.txt
        output_path = "data/assignment_received.txt" #
        with open(output_path, "wb") as f: #
            f.write(full_content) #
        print("ACK: ƒê√£ nh·∫≠n b√†i th√†nh c√¥ng.") # G·ª≠i ACK t·ªõi Ng∆∞·ªùi g·ª≠i (m√¥ ph·ªèng)
        return f" Nh·∫≠n b√†i th√†nh c√¥ng. ƒê√£ l∆∞u v√†o: {output_path}" #
    else:
        # Ng∆∞·ª£c l·∫°i n·∫øu hash ho·∫∑c ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá ‚Äì T·ª´ ch·ªëi, g·ª≠i NACK (l·ªói integrity) t·ªõi Ng∆∞·ªùi g·ª≠i (m√¥ ph·ªèng)
        return "Nh·∫≠n b√†i th·∫•t b·∫°i do l·ªói to√†n v·∫πn d·ªØ li·ªáu (hash ho·∫∑c ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá)." #

# H√†m d√πng ƒë·ªÉ g·ªçi nh·∫≠n b√†i v√† hi·ªán popup th√¥ng b√°o k·∫øt qu·∫£
def gui_receive():
    result = receive_assignment()
    messagebox.showinfo("K·∫øt qu·∫£", result)

# T·∫°o giao di·ªán GUI v·ªõi Tkinter
def main():
    root = Tk()
    root.title("Nh·∫≠n b√†i t·∫≠p")

    Label(root, text=" Nh·∫≠n & ki·ªÉm tra b√†i t·∫≠p ƒë∆∞·ª£c m√£ h√≥a", font=("Arial", 12)).pack(pady=10)
    Button(root, text=" Nh·∫≠n b√†i t·∫≠p", command=gui_receive, width=30).pack(pady=15)

    root.mainloop()

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    main()