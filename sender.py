# G·ª≠i b√†i t·∫≠p chia th√†nh nhi·ªÅu ph·∫ßn
import os
import base64
import json
import time
from tkinter import Tk, Button, Label, filedialog, messagebox
from Crypto.Cipher import DES
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA512
from Crypto.Random import get_random_bytes
from Crypto.Cipher import PKCS1_v1_5
from tkinter.simpledialog import askstring

#  T·∫†O C·∫∂P KH√ìA RSA CHO SENDER & RECEIVER ===

def generate_keys_gui():
    os.makedirs("keys", exist_ok=True) #

    # T·∫°o c·∫∑p kh√≥a RSA cho ng∆∞·ªùi g·ª≠i (sender)
    sender_key = RSA.generate(1024) #
    with open("keys/sender_private.pem", "wb") as f: #
        f.write(sender_key.export_key()) #
    with open("keys/sender_public.pem", "wb") as f: #
        f.write(sender_key.publickey().export_key()) #

    # T·∫°o c·∫∑p kh√≥a RSA cho ng∆∞·ªùi nh·∫≠n (receiver), kh√≥a ri√™ng ƒë∆∞·ª£c m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p
    passphrase = askstring("Nh·∫≠p m·∫≠t kh·∫©u", " Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m√£ h√≥a kh√≥a ri√™ng c·ªßa receiver:", show="*") #
    if not passphrase: #
        messagebox.showwarning("H·ªßy", "Kh√¥ng t·∫°o kh√≥a do kh√¥ng c√≥ m·∫≠t kh·∫©u.") #
        return

    receiver_key = RSA.generate(1024) #
    with open("keys/receiver_private.pem", "wb") as f: #
        f.write(receiver_key.export_key(passphrase=passphrase, pkcs=8, protection="scryptAndAES128-CBC")) #
    with open("keys/receiver_public.pem", "wb") as f: #
        f.write(receiver_key.publickey().export_key()) #

    messagebox.showinfo("Th√†nh c√¥ng", "üîê ƒê√£ t·∫°o c·∫∑p kh√≥a v√† l∆∞u v√†o th∆∞ m·ª•c 'keys/'.") #

# G·ª¨I FILE B√ÄI T·∫¨P - CHIA NH·ªé, M√É H√ìA V√Ä K√ù S·ªê 

# H√†m padding d·ªØ li·ªáu ƒë·ªÉ v·ª´a block DES (8 byte)
def pad(data):
    pad_len = 8 - len(data) % 8 #
    return data + bytes([pad_len] * pad_len) #

def send_assignment(filepath):
    os.makedirs("sent", exist_ok=True) #t·∫°o th∆∞ m·ª•c l∆∞u file g·ª≠i
    os.makedirs("keys", exist_ok=True) #ƒë·∫£m b·∫£o th∆∞ m·ª•c kh√≥a t·ªìn t·∫°i

    # T·∫£i kh√≥a ri√™ng c·ªßa sender v√† kh√≥a c√¥ng khai c·ªßa receiver
    try:
        sender_private = RSA.import_key(open("keys/sender_private.pem").read()) #ƒë·ªçc kh√≥a ri√™ng sender
        receiver_public = RSA.import_key(open("keys/receiver_public.pem").read()) #ƒë·ªçc kh√≥a c√¥ng khai receiver
    except FileNotFoundError: #
        return " Thi·∫øu file kh√≥a trong th∆∞ m·ª•c keys/" #

    # --- 1. Handshake: Ng∆∞·ªùi g·ª≠i g·ª≠i "Hello!" ---
    # Tin nh·∫Øn "Hello!" s·∫Ω ƒë∆∞·ª£c nh√∫ng v√†o metadata ƒë·ªÉ ng∆∞·ªùi nh·∫≠n c√≥ th·ªÉ ki·ªÉm tra
    
    # T·∫°o metadata g·ªìm t√™n file, timestamp, s·ªë ph·∫ßn chia, v√† tin nh·∫Øn "Hello!"
    filename = os.path.basename(filepath) #
    timestamp = str(int(time.time())) #
    metadata_str = f"Hello!|{filename}|{timestamp}|3" #
    metadata = metadata_str.encode() #

    # --- 2. X√°c th·ª±c & Trao kh√≥a ---
    # Ng∆∞·ªùi g·ª≠i k√Ω metadata (t√™n file + timestamp + s·ªë ph·∫ßn) b·∫±ng RSA/SHA-512
    meta_hash = SHA512.new(metadata) #
    meta_sig = pkcs1_15.new(sender_private).sign(meta_hash) #

    # Ng∆∞·ªùi g·ª≠i m√£ h√≥a SessionKey b·∫±ng RSA 1024-bit (PKCS#1 v1.5) v√† g·ª≠i
    session_key = get_random_bytes(8)  # Kh√≥a DES 8 byte (64 bit)
    cipher_rsa = PKCS1_v1_5.new(receiver_public) #
    enc_key = cipher_rsa.encrypt(session_key) #

    # ƒê·ªçc to√†n b·ªô n·ªôi dung file
    with open(filepath, 'rb') as f: #
        content = f.read() #

    # Chia file th√†nh 3 ph·∫ßn
    size = len(content) // 3 #
    parts_data = [content[i*size:(i+1)*size] for i in range(2)] + [content[2*size:]] #

    # --- 3. M√£ h√≥a & Ki·ªÉm tra to√†n v·∫πn ---
    packets = [] #
    for part in parts_data: #
        iv = get_random_bytes(8)  # T·∫°o IV (8 byte) cho DES
        cipher_des = DES.new(session_key, DES.MODE_CBC, iv) #
        ciphertext = cipher_des.encrypt(pad(part)) # M√£ h√≥a m·ªói ph·∫ßn b·∫±ng DES

        # T√≠nh hash: SHA-512(IV || ciphertext) cho m·ªói ph·∫ßn
        digest = SHA512.new(iv + ciphertext) #
        # K√Ω s·ªë hash c·ªßa m·ªói ph·∫ßn
        signature = pkcs1_15.new(sender_private).sign(digest) #

        # G√≥i tin g·ª≠i (m·ªói ph·∫ßn)
        packets.append({
            "iv": base64.b64encode(iv).decode(), #
            "cipher": base64.b64encode(ciphertext).decode(), #
            "hash": digest.hexdigest(), #
            "sig": base64.b64encode(signature).decode() #
        })

    # L∆∞u to√†n b·ªô d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o file JSON
    sent_filepath = "sent/sent_packets.json" #
    with open(sent_filepath, "w") as f: #
        json.dump({
            "metadata": base64.b64encode(metadata).decode(), #
            "meta_sig": base64.b64encode(meta_sig).decode(), #
            "enc_session_key": base64.b64encode(enc_key).decode(), #
            "parts": packets #
        }, f, indent=2) #

    return f"G·ª≠i file '{filename}' th√†nh c√¥ng. ƒê√£ chia v√† m√£ h√≥a 3 ph·∫ßn v√†o '{sent_filepath}'." #

#  GIAO DI·ªÜN GUI

def gui_send():
    filepath = filedialog.askopenfilename(title="Ch·ªçn file b√†i t·∫≠p", initialfile="assignment.txt")
    if not filepath:
        return
    result = send_assignment(filepath)
    messagebox.showinfo("K·∫øt qu·∫£", result)

def main():
    root = Tk()
    root.title(" G·ª≠i b√†i t·∫≠p")

    Label(root, text="G·ª≠i file b√†i t·∫≠p l·ªõn chia 3 ph·∫ßn (DES + RSA)", font=("Arial", 12)).pack(pady=10)
    Button(root, text="üìÅ Ch·ªçn v√† G·ª≠i b√†i t·∫≠p", command=gui_send, width=30).pack(pady=5)
    Button(root, text="üîë T·∫°o kh√≥a (Sender & Receiver)", command=generate_keys_gui, width=30).pack(pady=5)

    root.mainloop()

if __name__ == "__main__":
    main()